/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ua.edu.lnu.cluster.algorithm.ui;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.AbstractTableModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;
import ua.edu.lnu.cluster.DataModel;
import ua.edu.lnu.cluster.algorithm.api.ClusterInfo;
import ua.edu.lnu.cluster.algorithm.api.ClusteringAlgorithm;
import ua.edu.lnu.cluster.algorithm.api.PartitionalClustering;
import ua.edu.lnu.cluster.measures.api.ProximityMeasure;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ua.edu.lnu.cluster.algorithm.ui//PartitionalClustering//EN",
autostore = false)
@TopComponent.Description(preferredID = "PartitionalClusteringTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "ua.edu.lnu.cluster.algorithm.ui.PartitionalClusteringTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_PartitionalClusteringAction",
preferredID = "PartitionalClusteringTopComponent")
public final class PartitionalClusteringTopComponent extends TopComponent implements LookupListener {

    private Lookup.Result result = null;
    private DataModel model = null;
    public PartitionalClusteringTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(PartitionalClusteringTopComponent.class, "CTL_PartitionalClusteringTopComponent"));
        setToolTipText(NbBundle.getMessage(PartitionalClusteringTopComponent.class, "HINT_PartitionalClusteringTopComponent"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PartitionalClusteringTopComponent.class, "PartitionalClusteringTopComponent.jLabel1.text")); // NOI18N

        jComboBox1.setModel(new PartitionalClusterModel());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(PartitionalClusteringTopComponent.class, "PartitionalClusteringTopComponent.jLabel2.text")); // NOI18N

        jComboBox2.setModel(new MeasureModel());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(PartitionalClusteringTopComponent.class, "PartitionalClusteringTopComponent.jLabel3.text")); // NOI18N

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(1), null, Integer.valueOf(1)));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(PartitionalClusteringTopComponent.class, "PartitionalClusteringTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, 0, 226, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, 226, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //if fails - add: .getClass().newInstance()
        PartitionalClustering algorithm = (PartitionalClustering) jComboBox1.getSelectedItem();
        ProximityMeasure measure = (ProximityMeasure) jComboBox2.getSelectedItem();
        
        ClusterInfo clustered = algorithm.calculate(model.getPreparedCalculationData(), null, measure, (Integer)jSpinner1.getValue());
        
        jTable1.setModel(new ResultsTableModel(clustered));
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(DataModel.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
        result = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result r = (Lookup.Result) le.getSource();
        Collection c = r.allInstances();
        if (!c.isEmpty()) {
            model = (DataModel) c.iterator().next();
            setName("Partitional clustering for [" + model.getName() + "]");
        } else {
//            model = null;
//            setName("No DataModel selected");
        }
        jButton1.setEnabled(model == null ? false : true);
    }

//    ClusterInfo calculate(List<double[]> observations, double[][] matrix, ProximityMeasure measure, int clusterCount);
    private static class PartitionalClusterModel extends DefaultComboBoxModel {

        private List<Object> algorithms = null;

        public PartitionalClusterModel() {
            Collection<? extends PartitionalClustering> lookupInterps = (Collection<? extends PartitionalClustering>) Lookup.getDefault().lookupAll(PartitionalClustering.class);
            algorithms = Arrays.asList(lookupInterps.toArray());
        }

        @Override
        public int getSize() {
            return algorithms.size();
        }

        @Override
        public Object getElementAt(int i) {
            return algorithms.get(i);
        }
    }

    private static class MeasureModel extends DefaultComboBoxModel {

        private List<Object> measures = null;

        public MeasureModel() {
            Collection<? extends ProximityMeasure> lookupInterps = (Collection<? extends ProximityMeasure>) Lookup.getDefault().lookupAll(ProximityMeasure.class);
            measures = Arrays.asList(lookupInterps.toArray());
        }

        @Override
        public int getSize() {
            return measures.size();
        }

        @Override
        public Object getElementAt(int i) {
            return measures.get(i);
        }
    }
    
    private static class ResultsTableModel extends AbstractTableModel {
        
        private ClusterInfo info;
        
        public ResultsTableModel(ClusterInfo info) {
            this.info = info;
        }
        
        @Override
        public int getRowCount() {
            return info.getResults().length;
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int row, int col) {
           return col == 0? row : info.getClusterNumber(row);
        }
    }
}
